/*
Euler path:- A path visiting all edges exactly once.
Euler circuit:- A path visiting all edges exactly once but starting and ending vertices are same.

Condition for E.P. :- 0/2 vertices of odd degree.
Condition for E.C. :- 0 vertices of even degree.

*/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;

#define int         long long
#define pb          push_back
#define pii         pair<int,int>
#define vi          vector<int>
#define vii         vector<pii>
#define mi          map<int,int>
#define mii         map<pii,int>
#define all(a)      (a).begin(),(a).end()
#define f           first
#define s          second
#define sz(x)       (int)x.size()
#define rep(i,a,b)  for(int i=a;i<b;i++)
#define rep0(a,n)  for(int i=0;i<n;i++)cin>>a[i]
#define si(x)       cin>>x
#define sii(x,y)    cin>>x>>y
#define siii(x,y,z) cin>>x>>y>>z
#define ahell   998244353
#define hell 1000000007
#define hell_bro 1000000009
#define N1 500005
#define fl 1.0000000000
#define mod 998244353
#define w1 1.414213562373095
#define cntbit(a) __builtin_popcountll(a)
#define ios ios_base::sync_with_stdio(false); cin.tie(NULL);

mt19937 rng32(chrono::steady_clock::now().time_since_epoch().count());

using namespace std;
const int N = 2e5 + 4;
int i,j,k,n;
void solve(){
 string a;
 vector<char>v1,v2;
 si(a);
 for(auto x:a)
 {
  if((x-'0')%2==0)
    v1.pb(x);
  else
    v2.pb(x);
 }
 string ans;
 i=0,j=0;
 while(i<sz(v1)||j<sz(v2))
 {
  if(i<sz(v1)&&j<sz(v2))
  {
    if(v1[i]<=v2[j])
      ans.pb(v1[i]),i++;
    else
      ans.pb(v2[j]),j++;
  }
  else if(i<sz(v1))
    ans.pb(v1[i++]);
  else
    ans.pb(v2[j++]);
 }
 cout<<ans<<endl;
}

main()
{
  ios
  int i,j,test;
  test=1;
     si(test);
  while(test--)
  {

    solve();

  }

}
